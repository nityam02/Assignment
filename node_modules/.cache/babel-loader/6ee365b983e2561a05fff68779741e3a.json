{"ast":null,"code":"var _jsxFileName = \"/home/nityam/Desktop/assisnment/Assignment/src/components/PrivateRoute/PrivateRoute.js\";\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nexport default function PrivateRoute({\n  component: Component,\n  exact,\n  roles,\n  ...rest\n}) {\n  return /*#__PURE__*/React.createElement(Route, Object.assign({\n    exact: exact\n  }, rest, {\n    render: props => {\n      const currentUser = null; //For demo only\n\n      if (!currentUser) {\n        // not logged in so redirect to login page with the return url\n        return /*#__PURE__*/React.createElement(Redirect, {\n          to: {\n            pathname: \"/login\",\n            state: {\n              from: props.location\n            }\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 13\n          }\n        });\n      } // check if route is restricted by role\n\n\n      if (roles && roles.indexOf(currentUser.role) === -1) {\n        // role not authorised so redirect to home page\n        return /*#__PURE__*/React.createElement(Redirect, {\n          to: {\n            pathname: \"/\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 18\n          }\n        });\n      } // authorised so return component\n\n\n      return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 16\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }));\n}","map":{"version":3,"sources":["/home/nityam/Desktop/assisnment/Assignment/src/components/PrivateRoute/PrivateRoute.js"],"names":["React","Route","Redirect","PrivateRoute","component","Component","exact","roles","rest","props","currentUser","pathname","state","from","location","indexOf","role"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AAEA,eAAe,SAASC,YAAT,CAAsB;AACnCC,EAAAA,SAAS,EAAEC,SADwB;AAEnCC,EAAAA,KAFmC;AAGnCC,EAAAA,KAHmC;AAInC,KAAGC;AAJgC,CAAtB,EAKZ;AACD,sBACE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAEF;AADT,KAEME,IAFN;AAGE,IAAA,MAAM,EAAGC,KAAD,IAAW;AACjB,YAAMC,WAAW,GAAG,IAApB,CADiB,CACS;;AAC1B,UAAI,CAACA,WAAL,EAAkB;AAChB;AACA,4BACE,oBAAC,QAAD;AACE,UAAA,EAAE,EAAE;AAAEC,YAAAA,QAAQ,EAAE,QAAZ;AAAsBC,YAAAA,KAAK,EAAE;AAAEC,cAAAA,IAAI,EAAEJ,KAAK,CAACK;AAAd;AAA7B,WADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,OATgB,CAUjB;;;AACA,UAAIP,KAAK,IAAIA,KAAK,CAACQ,OAAN,CAAcL,WAAW,CAACM,IAA1B,MAAoC,CAAC,CAAlD,EAAqD;AACnD;AACA,4BAAO,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAE;AAAEL,YAAAA,QAAQ,EAAE;AAAZ,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OAdgB,CAgBjB;;;AACA,0BAAO,oBAAC,SAAD,oBAAeF,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD,KArBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAyBD","sourcesContent":["import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nexport default function PrivateRoute({\n  component: Component,\n  exact,\n  roles,\n  ...rest\n}) {\n  return (\n    <Route\n      exact={exact}\n      {...rest}\n      render={(props) => {\n        const currentUser = null; //For demo only\n        if (!currentUser) {\n          // not logged in so redirect to login page with the return url\n          return (\n            <Redirect\n              to={{ pathname: \"/login\", state: { from: props.location } }}\n            />\n          );\n        }\n        // check if route is restricted by role\n        if (roles && roles.indexOf(currentUser.role) === -1) {\n          // role not authorised so redirect to home page\n          return <Redirect to={{ pathname: \"/\" }} />;\n        }\n\n        // authorised so return component\n        return <Component {...props} />;\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}